package com.juniquelab.rainbowtraining.presentation.ui.game.components

import androidx.compose.animation.animateContentSize
import androidx.compose.animation.core.LinearOutSlowInEasing
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.EmojiEvents
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material.icons.filled.LockOpen
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Star
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.scale
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import com.juniquelab.rainbowtraining.ui.theme.RainbowTrainingTheme
import kotlinx.coroutines.delay

/**
 * Î†àÎ≤® ÏôÑÎ£å Ïãú ÌëúÏãúÎêòÎäî Îã§Ïù¥ÏñºÎ°úÍ∑∏
 * Ï†êÏàò, ÌÜµÍ≥º Ïó¨Î∂Ä, Ïã†Í∏∞Î°ù, Îã§Ïùå Î†àÎ≤® Ìï¥Í∏à Îì±Ïùò Ï†ïÎ≥¥Î•º ÌëúÏãú
 */
@Composable
fun LevelCompleteDialog(
    isVisible: Boolean,
    level: Int,
    finalScore: Int,
    requiredScore: Int,
    isPass: Boolean,
    isNewBestScore: Boolean,
    nextLevelUnlocked: Boolean,
    onDismiss: () -> Unit,
    onNextLevel: () -> Unit,
    onRetry: () -> Unit,
    onBackToLevels: () -> Unit,
    modifier: Modifier = Modifier
) {
    if (!isVisible) return

    /**
     * Ïï†ÎãàÎ©îÏù¥ÏÖòÏùÑ ÏúÑÌïú ÏÉÅÌÉú
     */
    var showContent by remember { mutableStateOf(false) }
    
    /**
     * Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú ÌõÑ ÏΩòÌÖêÏ∏† Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë
     */
    LaunchedEffect(isVisible) {
        if (isVisible) {
            delay(100)
            showContent = true
        }
    }

    /**
     * Ïä§ÏºÄÏùº Ïï†ÎãàÎ©îÏù¥ÏÖò
     */
    val scale by animateFloatAsState(
        targetValue = if (showContent) 1f else 0.8f,
        animationSpec = tween(
            durationMillis = 400,
            easing = LinearOutSlowInEasing
        ),
        label = "dialogScale"
    )

    Dialog(
        onDismissRequest = onDismiss,
        properties = DialogProperties(
            dismissOnBackPress = true,
            dismissOnClickOutside = false
        )
    ) {
        Card(
            modifier = modifier
                .fillMaxWidth()
                .scale(scale)
                .animateContentSize(
                    animationSpec = tween(durationMillis = 300)
                ),
            shape = RoundedCornerShape(20.dp),
            colors = CardDefaults.cardColors(
                containerColor = if (isPass) 
                    Color(0xFFF1F8E9) // Ïó∞Ìïú Ï¥àÎ°ù Î∞∞Í≤Ω (ÌÜµÍ≥º)
                else 
                    Color(0xFFFFF3E0) // Ïó∞Ìïú Ï£ºÌô© Î∞∞Í≤Ω (ÎØ∏ÌÜµÍ≥º)
            ),
            elevation = CardDefaults.cardElevation(
                defaultElevation = 16.dp
            )
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                /**
                 * Í≤∞Í≥º Ìó§Îçî (ÏïÑÏù¥ÏΩò + Ï†úÎ™©)
                 */
                ResultHeader(
                    isPass = isPass,
                    level = level
                )

                /**
                 * Ï†êÏàò Ï†ïÎ≥¥
                 */
                ScoreSection(
                    finalScore = finalScore,
                    requiredScore = requiredScore,
                    isPass = isPass,
                    isNewBestScore = isNewBestScore
                )

                /**
                 * Ï∂îÍ∞Ä Ï†ïÎ≥¥ (Ïã†Í∏∞Î°ù, Îã§Ïùå Î†àÎ≤® Ìï¥Í∏à)
                 */
                if (isNewBestScore || nextLevelUnlocked) {
                    AdditionalInfo(
                        isNewBestScore = isNewBestScore,
                        nextLevelUnlocked = nextLevelUnlocked
                    )
                }

                Spacer(modifier = Modifier.height(8.dp))

                /**
                 * Ïï°ÏÖò Î≤ÑÌäºÎì§
                 */
                ActionButtons(
                    isPass = isPass,
                    nextLevelUnlocked = nextLevelUnlocked,
                    onNextLevel = onNextLevel,
                    onRetry = onRetry,
                    onBackToLevels = onBackToLevels
                )
            }
        }
    }
}

/**
 * Í≤∞Í≥º Ìó§Îçî Ïª¥Ìè¨ÎÑåÌä∏
 */
@Composable
private fun ResultHeader(
    isPass: Boolean,
    level: Int
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        // Í≤∞Í≥º ÏïÑÏù¥ÏΩò
        Box(
            modifier = Modifier
                .size(80.dp)
                .clip(CircleShape)
                .background(
                    if (isPass) Color(0xFF4CAF50) else Color(0xFFFF9800)
                ),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = if (isPass) "üéâ" else "üòÖ",
                style = MaterialTheme.typography.displayMedium
            )
        }

        // Ï†úÎ™© ÌÖçÏä§Ìä∏
        Text(
            text = if (isPass) "Î†àÎ≤® $level ÏôÑÎ£å!" else "Î†àÎ≤® $level ÎèÑÏ†Ñ",
            style = MaterialTheme.typography.headlineMedium,
            fontWeight = FontWeight.Bold,
            color = if (isPass) Color(0xFF2E7D32) else Color(0xFFE65100),
            textAlign = TextAlign.Center
        )

        // Î∂ÄÏ†úÎ™©
        Text(
            text = if (isPass) "Ï∂ïÌïòÌï©ÎãàÎã§!" else "Îã§Ïãú ÎèÑÏ†ÑÌï¥Î≥¥ÏÑ∏Ïöî!",
            style = MaterialTheme.typography.bodyLarge,
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            textAlign = TextAlign.Center
        )
    }
}

/**
 * Ï†êÏàò ÏÑπÏÖò Ïª¥Ìè¨ÎÑåÌä∏
 */
@Composable
private fun ScoreSection(
    finalScore: Int,
    requiredScore: Int,
    isPass: Boolean,
    isNewBestScore: Boolean
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 4.dp
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            // ÏµúÏ¢Ö Ï†êÏàò
            Row(
                verticalAlignment = Alignment.Bottom,
                horizontalArrangement = Arrangement.Center
            ) {
                Text(
                    text = "$finalScore",
                    style = MaterialTheme.typography.displaySmall,
                    fontWeight = FontWeight.Bold,
                    color = if (isPass) Color(0xFF4CAF50) else Color(0xFFFF9800)
                )
                Text(
                    text = "Ï†ê",
                    style = MaterialTheme.typography.titleLarge,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.padding(bottom = 4.dp)
                )
                
                if (isNewBestScore) {
                    Icon(
                        imageVector = Icons.Default.Star,
                        contentDescription = "Ïã†Í∏∞Î°ù",
                        tint = Color(0xFFFFD700), // Í∏àÏÉâ
                        modifier = Modifier
                            .padding(start = 8.dp)
                            .size(24.dp)
                    )
                }
            }

            // ÌÜµÍ≥º Ï†êÏàò ÎåÄÎπÑ
            Text(
                text = "ÌÜµÍ≥º Ï†êÏàò: ${requiredScore}Ï†ê",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )

            // Ï∞®Ïù¥Ï†ê ÌëúÏãú
            val scoreDifference = finalScore - requiredScore
            if (scoreDifference != 0) {
                Text(
                    text = if (scoreDifference > 0) 
                        "+${scoreDifference}Ï†ê Ï¥àÍ≥º Îã¨ÏÑ±!" 
                    else 
                        "${-scoreDifference}Ï†ê Î∂ÄÏ°±",
                    style = MaterialTheme.typography.bodySmall,
                    color = if (scoreDifference > 0) Color(0xFF4CAF50) else Color(0xFFE53935),
                    fontWeight = FontWeight.Medium
                )
            }
        }
    }
}

/**
 * Ï∂îÍ∞Ä Ï†ïÎ≥¥ ÏÑπÏÖò (Ïã†Í∏∞Î°ù, Îã§Ïùå Î†àÎ≤® Ìï¥Í∏à)
 */
@Composable
private fun AdditionalInfo(
    isNewBestScore: Boolean,
    nextLevelUnlocked: Boolean
) {
    Column(
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        if (isNewBestScore) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center,
                modifier = Modifier.fillMaxWidth()
            ) {
                Icon(
                    imageVector = Icons.Default.EmojiEvents,
                    contentDescription = "Ïã†Í∏∞Î°ù",
                    tint = Color(0xFFFFD700),
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = "üéä ÏÉàÎ°úÏö¥ ÏµúÍ≥† Í∏∞Î°ù!",
                    style = MaterialTheme.typography.bodyMedium,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFE65100)
                )
            }
        }

        if (nextLevelUnlocked) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center,
                modifier = Modifier.fillMaxWidth()
            ) {
                Icon(
                    imageVector = Icons.Default.LockOpen,
                    contentDescription = "Î†àÎ≤® Ìï¥Í∏à",
                    tint = Color(0xFF4CAF50),
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = "üîì Îã§Ïùå Î†àÎ≤®Ïù¥ Ìï¥Í∏àÎêòÏóàÏäµÎãàÎã§!",
                    style = MaterialTheme.typography.bodyMedium,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF2E7D32)
                )
            }
        }
    }
}

/**
 * Ïï°ÏÖò Î≤ÑÌäºÎì§
 */
@Composable
private fun ActionButtons(
    isPass: Boolean,
    nextLevelUnlocked: Boolean,
    onNextLevel: () -> Unit,
    onRetry: () -> Unit,
    onBackToLevels: () -> Unit
) {
    Column(
        verticalArrangement = Arrangement.spacedBy(12.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        if (isPass && nextLevelUnlocked) {
            // Îã§Ïùå Î†àÎ≤® Î≤ÑÌäº (Î©îÏù∏)
            Button(
                onClick = onNextLevel,
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF4CAF50)
                ),
                shape = RoundedCornerShape(12.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.LockOpen,
                    contentDescription = null,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = "Îã§Ïùå Î†àÎ≤® ÎèÑÏ†Ñ",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
            }
        }

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // Îã§Ïãú ÎèÑÏ†Ñ Î≤ÑÌäº
            OutlinedButton(
                onClick = onRetry,
                modifier = Modifier.weight(1f),
                shape = RoundedCornerShape(12.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.Refresh,
                    contentDescription = null,
                    modifier = Modifier.size(18.dp)
                )
                Spacer(modifier = Modifier.width(4.dp))
                Text(text = if (isPass) "Ïû¨ÎèÑÏ†Ñ" else "Îã§Ïãú ÏãúÎèÑ")
            }

            // Î†àÎ≤® ÏÑ†ÌÉùÏúºÎ°ú Î≤ÑÌäº
            OutlinedButton(
                onClick = onBackToLevels,
                modifier = Modifier.weight(1f),
                shape = RoundedCornerShape(12.dp)
            ) {
                Text(text = "Î†àÎ≤® ÏÑ†ÌÉù")
            }
        }
    }
}

/**
 * LevelCompleteDialog ÌÜµÍ≥º ÌîÑÎ¶¨Î∑∞
 */
@Preview(showBackground = true)
@Composable
private fun LevelCompleteDialogPassPreview() {
    RainbowTrainingTheme {
        LevelCompleteDialog(
            isVisible = true,
            level = 8,
            finalScore = 180,
            requiredScore = 130,
            isPass = true,
            isNewBestScore = true,
            nextLevelUnlocked = true,
            onDismiss = { },
            onNextLevel = { },
            onRetry = { },
            onBackToLevels = { }
        )
    }
}

/**
 * LevelCompleteDialog ÎØ∏ÌÜµÍ≥º ÌîÑÎ¶¨Î∑∞
 */
@Preview(showBackground = true)
@Composable
private fun LevelCompleteDialogFailPreview() {
    RainbowTrainingTheme {
        LevelCompleteDialog(
            isVisible = true,
            level = 12,
            finalScore = 85,
            requiredScore = 170,
            isPass = false,
            isNewBestScore = false,
            nextLevelUnlocked = false,
            onDismiss = { },
            onNextLevel = { },
            onRetry = { },
            onBackToLevels = { }
        )
    }
}